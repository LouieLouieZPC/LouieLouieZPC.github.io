<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python语言的重载、封装、多态、继承</title>
    <link href="/2020/07/05/Python%E8%AF%AD%E8%A8%80%E7%9A%84%E9%87%8D%E8%BD%BD%E3%80%81%E5%B0%81%E8%A3%85%E3%80%81%E5%A4%9A%E6%80%81%E3%80%81%E7%BB%A7%E6%89%BF/"/>
    <url>/2020/07/05/Python%E8%AF%AD%E8%A8%80%E7%9A%84%E9%87%8D%E8%BD%BD%E3%80%81%E5%B0%81%E8%A3%85%E3%80%81%E5%A4%9A%E6%80%81%E3%80%81%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="✨Python语言的重载、封装、多态、继承"><a href="#✨Python语言的重载、封装、多态、继承" class="headerlink" title="✨Python语言的重载、封装、多态、继承"></a>✨Python语言的重载、封装、多态、继承</h1><h1 id="一、重载"><a href="#一、重载" class="headerlink" title="一、重载"></a>一、重载</h1><p><strong>子类中的方法会覆盖父类中同名的方法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sayHello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;mua------1&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bosi</span>(<span class="title class_ inherited__">Cat</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sayHello</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;mua------2&#x27;</span>)</span><br><span class="line">Bosi=Bosi()</span><br><span class="line">Bosi.sayHello()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">以上结果如下：</span></span><br><span class="line"><span class="string">mua------2</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><hr><h1 id="二、封装"><a href="#二、封装" class="headerlink" title="二、封装"></a>二、封装</h1><p>通过设置好的接口函数来访问对象原理：<br>面向对象编程的一个重要特点就是数据封装。<br>既然Cat实例本身就拥有这些数据，要访问这些数据，就没有必要从外面的函数去访问，可以直接在Cat类的内部定义访问数据的函数，<br>这样，就把“数据”给封装起来了。这些封装数据的函数是Cat类本身是关联起来的，我们称之为类的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):      <span class="comment"># __init__是特殊变量，特殊变量是可以直接访问的,不是private变量</span></span><br><span class="line">        self._name=name</span><br><span class="line">        self._age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):           <span class="comment"># 设置接口函数，封装</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d岁的%s正在沙发上睡懒觉。&#x27;</span>%(self._age,self._name))  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self,food</span>):        <span class="comment"># 设置接口函数，封装</span></span><br><span class="line">        self._food=food</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d岁的%s正在吃%s。&#x27;</span>%(self._age,self._name,self._food))</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getAttribute</span>(<span class="params">self</span>):    <span class="comment"># 设置接口函数，封装</span></span><br><span class="line">        <span class="keyword">return</span> self._name,self._age</span><br><span class="line">cat1=Cat(<span class="string">&#x27;Tom&#x27;</span>,<span class="number">3</span>)      <span class="comment"># 创建对象，输入参数</span></span><br><span class="line">cat2=Cat(<span class="string">&#x27;Jack&#x27;</span>,<span class="number">4</span>)     <span class="comment"># 创建对象，输入参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Cat1的名字为：&#x27;</span>,cat1.name)         <span class="comment"># 私有化后从外部访问对象的属性会发现访问不了</span></span><br><span class="line">Traceback (most recent call last):      </span><br><span class="line">  File <span class="string">&quot;d:/01.Software/GitHub/GitHub Repository/hello-world/《Python编程基础》例题练习/5.1面对对象编程/6.对类的数据属性和方法进行私有化.py&quot;</span>, line <span class="number">23</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Cat1的名字为：&#x27;</span>,cat1.name)</span><br><span class="line">AttributeError: <span class="string">&#x27;Cat&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;name&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(cat1.sleep())           <span class="comment"># 只能通过设置好的接口函数来访问对象</span></span><br><span class="line"><span class="comment"># 结果为：3岁的Tom正在沙发上睡懒觉。</span></span><br><span class="line"><span class="built_in">print</span>(cat2.eat(<span class="string">&#x27;fish&#x27;</span>))       <span class="comment"># 只能通过设置好的接口函数来访问对象</span></span><br><span class="line"><span class="comment"># 结果为：4岁的Jack正在吃fish。</span></span><br><span class="line"><span class="built_in">print</span>(cat1.getAttribute())    <span class="comment"># 只能通过设置好的接口函数来访问对象</span></span><br><span class="line"><span class="comment"># 结果为：(&#x27;Tom&#x27;,3)</span></span><br></pre></td></tr></table></figure><hr><h1 id="三、多态"><a href="#三、多态" class="headerlink" title="三、多态"></a>三、多态</h1><h2 id="（一）用isinstance-判断是否为子类-一个对象是否是某种类型"><a href="#（一）用isinstance-判断是否为子类-一个对象是否是某种类型" class="headerlink" title="（一）用isinstance()判断是否为子类&#x2F;一个对象是否是某种类型"></a>（一）用isinstance()判断是否为子类&#x2F;一个对象是否是某种类型</h2><p>当子类和父类都存在相同的函数方法时，子类的函数方法覆盖了父类的函数方法，在代码运行的时候，总是会调用子类的函数方法。这样，我们就获得了继承的另一个好处：多态。</p><p>当我们定义一个class的时候，我们实际上就定义了一种数据类型。我们定义的数据类型和Python自带的数据类型，比如str、list、dict没什么两样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Animal is running...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Dog is running...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Cat is running...&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tortoise</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Tortoise is running slowly...&#x27;</span>)</span><br></pre></td></tr></table></figure><p>判断一个变量是否是某个类型可以用<code>isinstance()</code>  判断:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">list</span>() <span class="comment"># a是list类型</span></span><br><span class="line">c = Dog() <span class="comment"># c是Dog类型  </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isinstance</span>(a, <span class="built_in">list</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="built_in">isinstance</span>(c, Dog)  </span><br><span class="line"><span class="literal">True</span>  </span><br></pre></td></tr></table></figure><p>判断一个类是否是某个类的子类也可以用<code>isinstance()</code>判断:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(c,Animal)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="（二）多态的鸭子类型与开闭原则"><a href="#（二）多态的鸭子类型与开闭原则" class="headerlink" title="（二）多态的鸭子类型与开闭原则"></a>（二）多态的鸭子类型与开闭原则</h2><p>要理解多态的好处，我们还需要再编写一个函数，这个函数接受一个Animal类型的变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run_twice</span>(<span class="params">animal</span>):</span><br><span class="line">    animal.run()</span><br><span class="line">    animal.run()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>run_twice(Animal())</span><br><span class="line">Animal <span class="keyword">is</span> running...</span><br><span class="line">Animal <span class="keyword">is</span> running...</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>run_twice(Dog())</span><br><span class="line">Dog <span class="keyword">is</span> running...</span><br><span class="line">Dog <span class="keyword">is</span> running...</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>run_twice(Cat())</span><br><span class="line">Cat <span class="keyword">is</span> running...</span><br><span class="line">Cat <span class="keyword">is</span> running...</span><br></pre></td></tr></table></figure><p>1.<strong>由于Animal类型有run()方法，因此，传入的任意类型，只要是Animal类或者子类，就会自动调用实际类型的run()方法，这就是多态的意思</strong></p><p>1.1<strong>对于静态语言（例如Java）来说:</strong><br>如果需要传入Animal类型，则传入的对象必须是Animal类型或者它的子类，否则，将无法调用run()方法。</p><p>1.2<strong>对于Python这样的动态语言来说:</strong><br>不一定需要传入Animal类型。我们只需要保证传入的对象有一个run()方法就可以了：<br>即动态语言的 <strong>“鸭子类型”</strong> ，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Timer</span>(<span class="title class_ inherited__">object</span>):  </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Start...&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>run_twice(Timer())  <span class="comment">#Car类不继承，但因为有run()方法所以也可以run</span></span><br><span class="line">Cat <span class="keyword">is</span> running...</span><br><span class="line">Cat <span class="keyword">is</span> running...</span><br></pre></td></tr></table></figure><p>2.对于一个变量，我们只需要知道它是<code>Animal类型</code>，无需确切地知道它的子类型，就可以放心地调用run()方法，而具体调用的run()方法是作用在Animal、Dog、Cat还是Tortoise对象上，由运行时该对象的确切类型决定，这就是多态真正的威力：调用方只管调用，不管细节，而当我们新增一种Animal的子类时，只要确保run()方法编写正确，不用管原来的代码是如何调用的。这就是著名的 <strong>“开闭”原则</strong>：</p><p><strong>对扩展开放：允许新增<code>Animal</code>子类；</strong></p><p><strong>对修改封闭：不需要修改依赖<code>Animal</code>类型的<code>run_twice()</code>等函数。</strong></p><hr><h1 id="四、继承"><a href="#四、继承" class="headerlink" title="四、继承"></a>四、继承</h1><p><a href="https://www.runoob.com/w3cnote/python-extends-init.html">参考网站</a></p><h2 id="情况一：子类需要自动调用父类的方法："><a href="#情况一：子类需要自动调用父类的方法：" class="headerlink" title="情况一：子类需要自动调用父类的方法："></a>情况一：子类需要自动调用父类的方法：</h2><p><strong>子类不重写__init__()方法，实例化子类后，会自动调用父类的__init__()的方法。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;name:%s&#x27;</span>%self.name)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Father &#x27;</span>+self.name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span>(<span class="string">&#x27;这是父类的方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>(<span class="title class_ inherited__">Father</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Son &#x27;</span>+self.name</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    son=Son(<span class="string">&#x27;Yeats&#x27;</span>)         <span class="comment"># 创建子类对象</span></span><br><span class="line">    <span class="built_in">print</span>(son.test())</span><br><span class="line">    <span class="built_in">print</span>(son.get_name())    </span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line">name:Yeats       <span class="comment"># 子类中没有构造方法，以此默认调用父类的构造方法</span></span><br><span class="line">这是父类的方法    <span class="comment"># 子类继承且可调用父类的方法</span></span><br><span class="line">Son Yeats        <span class="comment"># 重装，子类中的方法会覆盖父类中同名的方法</span></span><br></pre></td></tr></table></figure><h2 id="情况二：子类不需要自动调用父类的方法："><a href="#情况二：子类不需要自动调用父类的方法：" class="headerlink" title="情况二：子类不需要自动调用父类的方法："></a>情况二：子类不需要自动调用父类的方法：</h2><p><strong>子类重写__init__()方法，实例化子类后，将不会自动调用父类的__init__()的方法。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Father &#x27;</span>+self.name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span>(<span class="string">&#x27;这是父类的方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>(<span class="title class_ inherited__">Father</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hola&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Son &#x27;</span>+self.name</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    son=Son(<span class="string">&#x27;Frank&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(son.test())</span><br><span class="line">    <span class="built_in">print</span>(son.get_name())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line">hola    <span class="comment"># 如果重写了__init__ 时，实例化子类，就不会调用父类已经定义的 __init__</span></span><br><span class="line">这是父类的方法    <span class="comment"># 子类继承且可调用父类的方法</span></span><br><span class="line">Son Frank  <span class="comment"># 重装，子类中的方法会覆盖父类中同名的方法</span></span><br></pre></td></tr></table></figure><h2 id="情况三：子类重写-init-方法又需要调用父类的方法："><a href="#情况三：子类重写-init-方法又需要调用父类的方法：" class="headerlink" title="情况三：子类重写__init__()方法又需要调用父类的方法："></a>情况三：子类重写__init__()方法又需要调用父类的方法：</h2><p><strong>使用super关键词：<code>super(子类，self).__init__(参数1，参数2，....)</code></strong><br>或者<br><strong><code>父类名称.__init__(self,参数1，参数2，...)</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Father &#x27;</span>+self.name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span>(<span class="string">&#x27;这是父类的方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>(<span class="title class_ inherited__">Father</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;hola&#x27;</span>)</span><br><span class="line">        Father.__init__(self,name)      <span class="comment"># 重写了__init__ 时，但又继承了父类的构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Son &#x27;</span>+self.name</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    son=Son(<span class="string">&#x27;Frank Yeats&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(son.test())</span><br><span class="line">    <span class="built_in">print</span>(son.get_name())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line">hola</span><br><span class="line">hi</span><br><span class="line">这是父类的方法    <span class="comment"># 子类继承且可调用父类的方法</span></span><br><span class="line">Son Frank Yeats     <span class="comment"># 重装，子类中的方法会覆盖父类中同名的方法</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RE库</title>
    <link href="/2020/07/03/re%E5%BA%93/"/>
    <url>/2020/07/03/re%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="re库"><a href="#re库" class="headerlink" title="re库"></a>re库</h1><h2 id="一、RE库介绍"><a href="#一、RE库介绍" class="headerlink" title="一、RE库介绍"></a>一、RE库介绍</h2><p>调用方法：<code>import re</code></p><h2 id="二、正则表达式的表示类型"><a href="#二、正则表达式的表示类型" class="headerlink" title="二、正则表达式的表示类型"></a>二、正则表达式的表示类型</h2><p>re库可用raw string类型（即原生字符串类型。当正则表达式包含转义符时，推荐使用）和普通的string类型</p><p>原生字符串类型是指：斜杠\  不会转意。因为正则表达式中操作符有些是和斜杠一起构成的，使用原生字符串就可以防止转义了。</p><p>在字符串前加一个小写字母r就可以了。<br>如：<br><code>r&quot;[1-9]?\d&quot;</code><br>所以：<br>当正则表达式中包含转意符号时，使用原生字符串。  </p><h2 id="三、re库主要功能函数"><a href="#三、re库主要功能函数" class="headerlink" title="三、re库主要功能函数"></a>三、re库主要功能函数</h2><p><img src="/2020/07/03/re%E5%BA%93/20170326202140623.png" alt="re库主要功能函数"></p><p><strong>PS1:re库通过编印方法创建对象</strong><br>以上通过.调用的方法使用re的方法是函数式用法：一次性操作<br>正则表达式还有另外一种方法：<br>即，面向对象用法：编译后多次操作：先使用<code>compile()</code>编译成正则表达式，之后再调用<code>search、match、findall、split、sub、finditer方法</code>。<br>没经过compile的字符串只是正则表达式的一种表现形式，经过<code>compile</code>后的才是正则表达式。</p><p>优点：一次编译可以多次使用该正则表达式进行匹配。  </p><h3 id="（一）regex-re-compile-pattern-flags-0"><a href="#（一）regex-re-compile-pattern-flags-0" class="headerlink" title="（一）regex&#x3D;re.compile(pattern,flags&#x3D;0)"></a>（一）regex&#x3D;re.compile(pattern,flags&#x3D;0)</h3><p>（1）作用：将一个正则表达式编译成一个正则表达式对象。<br>regex才是真正的正则表达式，re只是字符串  </p><p>（2）参数说明：<br>pattern：正则表达式字符串或原生字符串；<br>flags：正则表达式使用时的控制标记；</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pat = re.<span class="built_in">compile</span>(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>)   <span class="comment"># 通过编印创建对象（实例）</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rst = pat.search(<span class="string">&#x27;GHT 525343&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="二-re-search-pattern-string-flags-0"><a href="#二-re-search-pattern-string-flags-0" class="headerlink" title="(二)re.search(pattern,string,flags&#x3D;0)"></a>(二)re.search(pattern,string,flags&#x3D;0)</h3><p>搜索所有字符串内容，只取第一个能满足的</p><p>（1）作用：在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象。<br>（2）参数说明：  </p><ul><li>pattern：正则表达式的字符串或原生字符串  </li><li>string：需要和这个正则表达式匹配的字符串  </li><li>flags：正则表达式使用时的控制标记  <ul><li>re.I     忽略正则表达式的大小写，[a-z]可以匹配大写  </li><li>re.M  正则表达式中的^操作符能够将给定的字符串的每行当做匹配的开始  </li><li>re.S   正则表达式中的.点操作符能够匹配所有的字符，默认匹配除换行符外的所有字符</li></ul></li></ul><p>（3）实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">match</span>=re.search(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>,<span class="string">&#x27;BIT 100081&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">match</span>.group(<span class="number">0</span>))    <span class="comment"># group(0)方法表示输出匹配字符串</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># Output：</span></span><br><span class="line"><span class="string">100081</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="三-re-match-pattern-string-flags-0"><a href="#三-re-match-pattern-string-flags-0" class="headerlink" title="(三)re.match(pattern,string,flags&#x3D;0)"></a>(三)re.match(pattern,string,flags&#x3D;0)</h3><p>从头开始找，后面的不找，只取能满足条件的内容，若无，则返回空值</p><p>（1）作用：从一个字符串的开始位置起匹配正则表达式，返回match对象。</p><p>（2）参数说明：同search</p><p>（3）实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 第一个例子</span></span><br><span class="line"><span class="keyword">match</span>=re.<span class="keyword">match</span>(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>,<span class="string">&#x27;BIT 100081&#x27;</span>)  </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">match</span>.group(<span class="number">0</span>))   <span class="comment"># 无结果，因为match是个空变量，&quot;returning a Match object, or None if no match was found.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># Output:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个例子：你中头奖了！！！</span></span><br><span class="line"><span class="keyword">match</span>=re.<span class="keyword">match</span>(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>,<span class="string">&#x27;100081 BIT&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">match</span>.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># Output:</span></span><br><span class="line"><span class="string">100081</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="四-re-findall-pattern-string-flags-0"><a href="#四-re-findall-pattern-string-flags-0" class="headerlink" title="(四)re.findall(pattern,string,flags&#x3D;0)"></a>(四)re.findall(pattern,string,flags&#x3D;0)</h3><p>搜索所有字符串内容，取所有能满足条件的，以列表的数据结构返回</p><p>（1）作用：搜索字符串，以列表的形式返回所有能够匹配的子串。</p><p>（2）参数说明：参数同search</p><p>（3）实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">Is=re.findall(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>,<span class="string">&#x27;BIT100081 TSU100084&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(Is)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># Output：</span></span><br><span class="line"><span class="string">[&#x27;100081&#x27;, &#x27;100084&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="五-re-split-patttern-string-maxsplit-0-flags-0"><a href="#五-re-split-patttern-string-maxsplit-0-flags-0" class="headerlink" title="(五)re.split(patttern,string,maxsplit&#x3D;0,flags&#x3D;0)"></a>(五)re.split(patttern,string,maxsplit&#x3D;0,flags&#x3D;0)</h3><p>（1）作用：将一个字符串按照正则表达式匹配的结果进行分割，返回列表类型。</p><p>（2）参数说明：<br>pattren\string\flags参数和search、match、findall的方法一样，</p><p>maxsplit：最大分割数（希望将字符串分割成几个部分），超过最大分割数的剩余部分作为最后一个元素输出</p><p>（3）实例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当maxsplit=0时</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">print</span>(re.split(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>,<span class="string">&#x27;BIT100081 TSU100084&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># Output：</span></span><br><span class="line"><span class="string">[&#x27;BIT&#x27;, &#x27; TSU&#x27;, &#x27;&#x27;]   # 输出列表中有一个空string，因为是剩余部分作为左后一个元素输出</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当maxsplit=1时</span></span><br><span class="line"><span class="built_in">print</span>(re.split(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>,<span class="string">&#x27;BIT100081 TSU100084&#x27;</span>,maxsplit=<span class="number">1</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># Output：</span></span><br><span class="line"><span class="string">[&#x27;BIT&#x27;, &#x27; TSU100084&#x27;]  # 最大分割是1，所以只分割1个，剩下的原路返回</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="六-re-finditer-pattern-string-flags-0-e"><a href="#六-re-finditer-pattern-string-flags-0-e" class="headerlink" title="(六)re.finditer(pattern,string,flags&#x3D;0)e"></a>(六)re.finditer(pattern,string,flags&#x3D;0)e</h3><p>findall得到的是一个列表，而finditer得到的是一个match对象的迭代器</p><p>（1）作用：搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素都是match对象。</p><p>（2）参数说明：参数和search、match、findall方法一样</p><p>（3）实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> re.finditer(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>,<span class="string">&#x27;BIT100081 TSU100084&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span> i:</span><br><span class="line">        <span class="built_in">print</span>(i.group(<span class="number">0</span>))</span><br><span class="line"><span class="keyword">match</span>=re.finditer(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>,<span class="string">&#x27;BIT100081 TSU100084&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="keyword">match</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># Output：</span></span><br><span class="line"><span class="string">100081</span></span><br><span class="line"><span class="string">100084</span></span><br><span class="line"><span class="string">&lt;class &#x27;callable_iterator&#x27;&gt;  #是个迭代器类型</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="七-re-sub-pattern-repl-string-count-0-flags-0"><a href="#七-re-sub-pattern-repl-string-count-0-flags-0" class="headerlink" title="(七)re.sub(pattern,repl,string,count&#x3D;0,flags&#x3D;0)"></a>(七)re.sub(pattern,repl,string,count&#x3D;0,flags&#x3D;0)</h3><p>（1）作用：在一个字符串中替换所有匹配正则表达式的子串，返回被替换后的字符串。sub即substitute（n. 代用品；代替者 v. 替代）</p><p>（2）参数说明：参数pattern、string、flags和search、match、findall的参数一样。</p><p>repl：替换匹配字符串的字符串</p><p>count：匹配的最大替换次数</p><p>（3）实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="built_in">print</span>(re.sub(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>,<span class="string">&#x27;:zipcode&#x27;</span>,<span class="string">&#x27;BIT100081 TSU100084&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># Output：</span></span><br><span class="line"><span class="string">BIT:zipcode TSU:zipcode</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="四、re库的match对象"><a href="#四、re库的match对象" class="headerlink" title="四、re库的match对象"></a>四、re库的match对象</h2><p>re的<code>search()、match()、finditer()</code>返回的是一个match对象，<code>search、match</code>只返回匹配到的第一个字符串，需要返回全部匹配的字符串使用<code>finditer，for</code>循环全部打印出来。<br>match对象是：一次匹配的结果，它包含了很多匹配的相关信息。</p><h3 id="一-match对象的属性"><a href="#一-match对象的属性" class="headerlink" title="(一)match对象的属性"></a>(一)match对象的属性</h3><ul><li>.string   待匹配的的文本</li><li>.re          匹配时使用的pattern对象（正则表达式）</li><li>.pos       正则表达是搜索文本的开始位置</li><li>.endpos  正则表达式搜索文本的结束位置</li></ul><h3 id="二-match对象的方法"><a href="#二-match对象的方法" class="headerlink" title="(二)match对象的方法"></a>(二)match对象的方法</h3><ul><li>group(0)      获得匹配后的字符串</li><li>start()           匹配字符串在原字符串的开始位置</li><li>end()            匹配字符串在原字符串的结束位置</li><li>span()          返回（.start(),.end()）元组结构</li></ul><h3 id="三-演示："><a href="#三-演示：" class="headerlink" title="(三)演示："></a>(三)演示：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">m=re.search(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>,<span class="string">&#x27;BIT100081 TSU100084&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(m.string)   <span class="comment"># 待匹配的文本</span></span><br><span class="line"><span class="built_in">print</span>(m.re)       <span class="comment"># 正则表达式</span></span><br><span class="line"><span class="built_in">print</span>(m.pos)      <span class="comment"># 搜索文本的开始位置</span></span><br><span class="line"><span class="built_in">print</span>(m.endpos)   <span class="comment"># 搜索文本的结束位置</span></span><br><span class="line"><span class="built_in">print</span>(m.group(<span class="number">0</span>)) <span class="comment"># 返回匹配后的字符串</span></span><br><span class="line"><span class="built_in">print</span>(m.start())  <span class="comment"># 匹配字符串在原字符串的开始位置</span></span><br><span class="line"><span class="built_in">print</span>(m.end())    <span class="comment"># 匹配字符串在原字符串的结束位置</span></span><br><span class="line"><span class="built_in">print</span>(m.span())   <span class="comment"># 返回一个元组，包括匹配字符串在原字符串的开始位置和结束位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># Output:</span></span><br><span class="line"><span class="string">BIT100081 TSU100084</span></span><br><span class="line"><span class="string">re.compile(&#x27;[1-9]\\d&#123;5&#125;&#x27;)</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">19</span></span><br><span class="line"><span class="string">100081</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">(3, 9)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Web Scraping With Python</tag>
      
      <tag>RE库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式概念及语法</title>
    <link href="/2020/07/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%AF%AD%E6%B3%95/"/>
    <url>/2020/07/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><a href="https://blog.csdn.net/zhangzeyuaaa/article/details/50390333">正则表达式的基本概念和语法</a><br><a href="https://www.runoob.com/python/python-reg-expressions.html">菜鸟教程</a><br><a href="https://blog.csdn.net/JOJOY_tester/article/details/71156117">正则表达式使用总结</a></p><h2 id="一、正则表达式概念"><a href="#一、正则表达式概念" class="headerlink" title="一、正则表达式概念"></a>一、正则表达式概念</h2><p>正则表达式，又称正规表示法、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。<br>（一）是什么：  </p><ul><li>是一个通用的字符串表达框架</li><li>是简洁表单表达一组字符串的表达式</li><li>针对字符串表达“简洁”和“特征”思想工具</li><li>判断某字符串的特征归属</li></ul><p>（二）有什么用：</p><ul><li>表达文本类型的特征（病毒&#x2F;入侵等）</li><li>同时查找或替换一组字符串</li><li>匹配字符串的全部或部分★</li></ul><p>（三）怎么使用：<br><strong>编译：将符合正则表达式语法的字符串转换为正则表达式特征</strong>  </p><blockquote><p>将正则表达式字符串赋给regex：<br>regex&#x3D;’P(Y|YT|YTH|YTHO|?N)’  </p><p>使用re库的compile方法编译,将一个字符串变成一个特征，而这个特征可以表达一组字符串：<br>p&#x3D;re.compile(regex)  </p><p>可以表达：<br>‘PN’<br>‘PYN’<br>‘PYTN’<br>‘PYTHN’<br>‘PYTHON’  </p></blockquote><h2 id="二、正则表达式语法（由字符和操作符构成）"><a href="#二、正则表达式语法（由字符和操作符构成）" class="headerlink" title="二、正则表达式语法（由字符和操作符构成）"></a>二、正则表达式语法（由字符和操作符构成）</h2><h3 id="（一）正则表达式的常用操作符："><a href="#（一）正则表达式的常用操作符：" class="headerlink" title="（一）正则表达式的常用操作符："></a>（一）正则表达式的常用操作符：</h3><p><img src="/2020/07/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%AF%AD%E6%B3%95/20170323202311025.png" alt="正则表达式的常用操作符1"><br><img src="/2020/07/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%AF%AD%E6%B3%95/20170323204916037.png" alt="正则表达式的常用操作符2"></p><h4 id="1-正则表达式语法常规实例："><a href="#1-正则表达式语法常规实例：" class="headerlink" title="1.正则表达式语法常规实例："></a>1.正则表达式语法常规实例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">P(Y|YT|YTH|YTHO)?N    <span class="string">&quot;PN&quot;</span>,<span class="string">&quot;PYN&quot;</span>,<span class="string">&quot;PYTN&quot;</span>,<span class="string">&quot;PYTHN&quot;</span>,<span class="string">&quot;PYTHON&quot;</span></span><br><span class="line">PYTHON+               <span class="string">&quot;PYTHON&quot;</span>,<span class="string">&quot;PYTHONN&quot;</span>,<span class="string">&quot;PYTHONNN...&quot;</span></span><br><span class="line">PY[TH]ON              <span class="string">&quot;PYTON&quot;</span>,<span class="string">&quot;PYHON&quot;</span></span><br><span class="line">PY[^TH]?ON            <span class="string">&quot;PYON&quot;</span>,<span class="string">&quot;PYAON&quot;</span>,<span class="string">&quot;PYXON&quot;</span></span><br><span class="line">PY&#123;:<span class="number">3</span>&#125;N               <span class="string">&quot;PN&quot;</span>,<span class="string">&quot;PYN&quot;</span>,<span class="string">&quot;PYYN&quot;</span>,<span class="string">&quot;PYYYN&quot;</span>   <span class="comment"># 表示扩展前一个字符0到3次，含3次</span></span><br></pre></td></tr></table></figure><h4 id="2-正则表达式语法经典实例："><a href="#2-正则表达式语法经典实例：" class="headerlink" title="2.正则表达式语法经典实例："></a>2.正则表达式语法经典实例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(cc)*                重复任意偶次数的c</span><br><span class="line">^[A-Za-z]+$          由<span class="number">26</span>个字母组成的字符串</span><br><span class="line">^[A-Za-z0-<span class="number">9</span>]+$       由<span class="number">26</span>个字母和数字组成的字符串</span><br><span class="line">^-?\d+$              整数形式的字符串</span><br><span class="line">^[<span class="number">0</span>-<span class="number">9</span>]*[<span class="number">1</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]*$  正整数形式的字符串</span><br><span class="line">[<span class="number">1</span>-<span class="number">9</span>]\d&#123;<span class="number">5</span>&#125;           中国境内邮政编码，<span class="number">6</span>位</span><br><span class="line">[\u4e00-\u9fa5]      匹配中文字符  <span class="comment">#采用utf8编码约定中文字符取值范围</span></span><br><span class="line">\d&#123;<span class="number">3</span>&#125;-\d&#123;<span class="number">8</span>&#125;|\d&#123;<span class="number">4</span>&#125;-\d&#123;<span class="number">7</span>&#125;  国内电话号码，<span class="number">0</span>10-<span class="number">68913536</span>  <span class="number">11</span>位啊</span><br></pre></td></tr></table></figure><h4 id="3-匹配IP地址的正则表达式："><a href="#3-匹配IP地址的正则表达式：" class="headerlink" title="3.匹配IP地址的正则表达式："></a>3.匹配IP地址的正则表达式：</h4><p>（IP地址分4段，每段是0-255）<br>0~255的范围由四段构成：分别为：<br><code>0-99：        [1-9]?\d</code><br><code>100-199：     1\d&#123;2&#125;</code><br><code>200-249：     2[0-4]\d</code><br><code>250-255：     25[0-5]</code></p><p>则ip地址为：<br><code>(([1-9]?\d|1\d&#123;2&#125;|2[0-4]\d|25[0-5]).)&#123;3&#125;([1-9]?\d|1\d&#123;2&#125;|2[0-4]\d|25[0-5])</code></p><h2 id="三、正则表达式和bs4结合实操："><a href="#三、正则表达式和bs4结合实操：" class="headerlink" title="三、正则表达式和bs4结合实操："></a>三、正则表达式和bs4结合实操：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment">#-*-coding:utf-8-*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url=<span class="string">&#x27;http://www.pythonscraping.com/pages/page3.html&#x27;</span></span><br><span class="line"></span><br><span class="line">ua=UserAgent()</span><br><span class="line">kv=&#123;<span class="string">&#x27;user-agent&#x27;</span>:ua.random&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r=requests.get(url,timeout=<span class="number">30</span>,headers=kv)</span><br><span class="line">    <span class="built_in">print</span>(r.status_code)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding=r.apparent_encoding</span><br><span class="line">    demo=r.text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;something is error!!!😱&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    soup=BeautifulSoup(demo,<span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;----------------------------------------------------------------&#x27;</span>)</span><br><span class="line">    images=soup.find_all(<span class="string">&#x27;img&#x27;</span>,&#123;<span class="string">&#x27;src&#x27;</span>:re.<span class="built_in">compile</span>(<span class="string">r&#x27;\.\./img/gifts/img.\.jpg&#x27;</span>)&#125;)   <span class="comment">#这里将正则表达式和find_all()函数配合使用</span></span><br><span class="line">    <span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">        <span class="built_in">print</span>(image[<span class="string">&#x27;src&#x27;</span>])   <span class="comment"># 迭代打印image标签中的src属性的内容</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># Output:</span></span><br><span class="line"><span class="string">200</span></span><br><span class="line"><span class="string">----------------------------------------------------------------</span></span><br><span class="line"><span class="string">../img/gifts/img1.jpg</span></span><br><span class="line"><span class="string">../img/gifts/img2.jpg</span></span><br><span class="line"><span class="string">../img/gifts/img3.jpg</span></span><br><span class="line"><span class="string">../img/gifts/img4.jpg</span></span><br><span class="line"><span class="string">../img/gifts/img6.jpg</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Web Scraping With Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Scrapy框架简析</title>
    <link href="/2020/07/03/Scrapy%E6%A1%86%E6%9E%B6%E7%AE%80%E6%9E%90/"/>
    <url>/2020/07/03/Scrapy%E6%A1%86%E6%9E%B6%E7%AE%80%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="Scrapy框架简析"><a href="#Scrapy框架简析" class="headerlink" title="Scrapy框架简析"></a>Scrapy框架简析</h1><p><a href="https://blog.csdn.net/Zhihua_W/article/details/103423640?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158605108319724845017234%2522%252C%2522scm%2522%253A%252220140713.130056874..%2522%257D&request_id=158605108319724845017234&biz_id=0&utm_source=distribute.pc_search_result.none-task-blog-all_SOOPENSEARCH-5">Reference website 1</a><br><a href="https://blog.csdn.net/qq_42633222/article/details/103498950?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158605108319724845017234%2522%252C%2522scm%2522%253A%252220140713.130056874..%2522%257D&request_id=158605108319724845017234&biz_id=0&utm_source=distribute.pc_search_result.none-task-blog-all_SOOPENSEARCH-1">Reference website 2</a><br><a href="https://www.jianshu.com/p/58dffe304bcf">Reference website 3</a></p><h2 id="一、Scrapy整体架构图"><a href="#一、Scrapy整体架构图" class="headerlink" title="一、Scrapy整体架构图"></a>一、Scrapy整体架构图</h2><p><img src="/2020/07/03/Scrapy%E6%A1%86%E6%9E%B6%E7%AE%80%E6%9E%90/20191211210547664.png" alt="Scrapy整体架构图"></p><h2 id="二、Scrapy框架各组件含义"><a href="#二、Scrapy框架各组件含义" class="headerlink" title="二、Scrapy框架各组件含义"></a>二、Scrapy框架各组件含义</h2><ol><li>引擎(Scrapy Engine)：用来处理整个系统的数据流处理, 触发事务(框架核心)。负责在<code>Spider</code>和<code>Item Pipeline</code>、<code>Downloader</code>、<code>Scheduler</code>中间通信、传输数据等。</li><li>调度器(Scheduler)： 用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL（抓取网页的网址或者说是链接）的优先队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址</li><li>下载器(Downloader)：用于下载网页内容, 并将网页内容返回给爬虫(Scrapy)，下载器是建立在twisted这个高效的异步模型上</li><li>爬虫(Spiders)：爬虫是主要干活的, 用于从特定的网页中提取自己需要的信息, 即所谓的实体(Item)。用户也可以从中提取出链接,让Scrapy继续抓取下一个页面。这部分是我们开发者自己写的，因为要爬取哪些链接，页面中的哪些数据是我们需要的，都是由程序员自己决定。</li><li>项目管道(Item Pipeline)：负责处理爬虫从网页中抽取的实体，主要的功能是持久化实体、验证实体的有效性、清除不需要的信息。当页面被爬虫(Spiders)解析后，将被发送到项目管道进行保存，并经过几个特定的次序处理数据。</li><li>下载器中间件(Downloader Middlewares)：位于Scrapy引擎和下载器之间的框架，主要是处理Scrapy引擎与下载器之间的请求及响应。</li><li>爬虫中间件(Spider Middlewares)：介于Scrapy引擎和爬虫之间的框架，主要工作是处理蜘蛛的响应输入和请求输出。</li><li>调度中间件(Scheduler Middewares)：介于Scrapy引擎和调度之间的中间件，从Scrapy引擎发送到调度的请求和响应。</li></ol><h2 id="三、Scrapy框架流程图及详解"><a href="#三、Scrapy框架流程图及详解" class="headerlink" title="三、Scrapy框架流程图及详解"></a>三、Scrapy框架流程图及详解</h2><h3 id="（一）Scrapy框架流程图"><a href="#（一）Scrapy框架流程图" class="headerlink" title="（一）Scrapy框架流程图"></a>（一）Scrapy框架流程图</h3><p><img src="/2020/07/03/Scrapy%E6%A1%86%E6%9E%B6%E7%AE%80%E6%9E%90/aHR0cDovL3Fpbml1LnpoaWh1YXdlaS5jbi9zY3JhcHlfYXJjaGl0ZWN0dXJlX2RpYWdyYW0xLnBuZw.jpg" alt="Scrapy框架流程图"></p><h3 id="（二）Scrapy框架流程详解"><a href="#（二）Scrapy框架流程详解" class="headerlink" title="（二）Scrapy框架流程详解"></a>（二）Scrapy框架流程详解</h3><ol><li>引擎从Spiders中获取到最初的要爬取的请求（Requests）；</li><li>引擎安排请求（Requests）到调度器中，并向调度器请求下一个要爬取的请求（Requests）；</li><li>调度器返回下一个要爬取的请求（Requests）给引擎；</li><li>引擎将上步中得到的请求（Requests）通过下载器中间件（Downloader Middlewares）发送给下载器（Downloader ）,这个过程中下载器中间件（Downloader Middlewares）中的process_request()函数会被调用到；</li><li>一旦页面下载完毕,下载器生成一个该页面的Response，并将其通过下载中间件（Downloader Middlewares）发送给引擎，这个过程中下载器中间件（Downloader Middlewares）中的process_response()函数会被调用到；</li><li>引擎从下载器中得到上步中的Response并通过Spider中间件(Spider Middlewares)发送给Spider处理,这个过程中Spider中间件(Spider Middlewares)中的process_spider_input()函数会被调用到；</li><li>Spider处理Response并通过Spider中间件(Spider Middlewares)返回爬取到的Item及(跟进的)新的Request给引擎，这个过程中Spider中间件(Spider Middlewares)的process_spider_output()函数会被调用到；</li><li>引擎将上步中Spider处理的其爬取到的Item给Item 管道（Pipeline），将Spider处理的Request发送给调度器，并向调度器请求可能存在的下一个要爬取的请求（Requests）；</li><li>(从第二步)重复直到调度器中没有更多的请求（Requests）。</li></ol><h2 id="四、scrapy常用命令"><a href="#四、scrapy常用命令" class="headerlink" title="四、scrapy常用命令"></a>四、scrapy常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* scrapy startproject xxx                   #创建一个名为XXX的项目</span><br><span class="line">* scrapy bench                              #查看机器的性能（每分钟访问多少页）</span><br><span class="line">* scrapy list                               #列出项目中文件</span><br><span class="line">* scrapy genspider xxx &quot;blog.csdn.net&quot;       #创建spider名为xxx网址为blog.csdn.net的爬虫</span><br><span class="line">* scrapy shell url                          #在浏览器中打开url</span><br><span class="line">* scrapy fetch url                          #对给定url抓取并输出</span><br><span class="line">* scrapy view url                           #浏览器中打开urls</span><br><span class="line">* scrapy crawl urlspider                    #执行urlspider.py文件</span><br></pre></td></tr></table></figure><h2 id="五、在cmd中创建scrapy项目"><a href="#五、在cmd中创建scrapy项目" class="headerlink" title="五、在cmd中创建scrapy项目"></a>五、在cmd中创建scrapy项目</h2><ol><li>命令一：创建项目文件   scrapy startproject  项目名称  </li><li>命令二：创建爬虫应用   scrapy genspider  爬虫名称 要爬取的域名          </li><li>命令三: 运行爬虫应用    scrapy crawl 爬虫应用名称</li></ol><p>(注意：爬虫的名称不能和项目名称一样)。</p><h2 id="六、生成的scrapy项目的文件目录及文件作用："><a href="#六、生成的scrapy项目的文件目录及文件作用：" class="headerlink" title="六、生成的scrapy项目的文件目录及文件作用："></a>六、生成的scrapy项目的文件目录及文件作用：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">project_folder -- 项目文件夹名称</span><br><span class="line">|</span><br><span class="line">├──project_name -- 该项目的python模块，一般和项目文件夹名称相同</span><br><span class="line">|  |</span><br><span class="line">|  ├──__init__.py -- 初始化脚本（无需编写）</span><br><span class="line">|  |</span><br><span class="line">|  ├──spiders/ -- Spiders代码模板目录（需要继承类）</span><br><span class="line">|  |  |</span><br><span class="line">|  |  ├──__init__.py -- 初始化文件（无需编写）</span><br><span class="line">|  |  |</span><br><span class="line">|  |  ├──__pycache__/ -- 缓存目录（无需编写）</span><br><span class="line">|  |</span><br><span class="line">|  ├──spider -- 放置spider代码的包，以后所有的爬虫，都存放在这个里面</span><br><span class="line">|  |</span><br><span class="line">|  ├──items.py -- 用来存放爬虫爬取来的数据的模型（需要继承类）（无需编写）</span><br><span class="line">|  |</span><br><span class="line">|  ├──middlewares.py -- 用来存放各种中间件的文件（需要继承类）</span><br><span class="line">|  |</span><br><span class="line">|  ├──pipelines.py -- 用来对items里面提取的数据做进一步处理，如保存到本地磁盘等（需要继承类）</span><br><span class="line">|  |</span><br><span class="line">|  ├──settings.py -- 本爬虫的一些配置信息(如请求头、多久发送一次请求、ip代理池等)</span><br><span class="line">|</span><br><span class="line">├──scrapy.cfg -- 项目的配置文件，部署（将爬虫放在特定的服务器上，在服务器配置好相关接口）Scrapy爬虫的配置文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="七、用Scrapy框架爬取网页示例"><a href="#七、用Scrapy框架爬取网页示例" class="headerlink" title="七、用Scrapy框架爬取网页示例"></a>七、用Scrapy框架爬取网页示例</h2><p><a href="https://blog.csdn.net/djs123DJS/article/details/80294421">用Scrapy框架爬取网页示例</a></p><h2 id="七、Scrapy爬虫的数据类型"><a href="#七、Scrapy爬虫的数据类型" class="headerlink" title="七、Scrapy爬虫的数据类型"></a>七、Scrapy爬虫的数据类型</h2><h3 id="（一）Request类"><a href="#（一）Request类" class="headerlink" title="（一）Request类"></a>（一）Request类</h3><p>class scrapy.http.Request()<br>Request对象表示一个HTTP请求<br>由Spider生成，由Downloader执行  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class scrapy.http.Request()</span><br><span class="line">Request对象表示一个HTTP请求，由Spider生成，由Downloader执行</span><br><span class="line">   属性或方法                |               说明</span><br><span class="line">   .url                     |       Request对应的请求URL地址</span><br><span class="line">   .method                  |       对应的请求方法，&#x27;GET&#x27; &#x27;POST&#x27;等</span><br><span class="line">   .headers                 |       字典类型风格的请求头</span><br><span class="line">   .body                    |       请求内容主体，字符串类型</span><br><span class="line">   .meta                    |       用户添加的扩展信息，在Scrapy内部模块间传递信息使用</span><br><span class="line">   .copy()                  |       复制该请求</span><br></pre></td></tr></table></figure><h3 id="（二）Response类"><a href="#（二）Response类" class="headerlink" title="（二）Response类"></a>（二）Response类</h3><p>class scrapy.http.Response()<br>Response对象表示一个HTTP响应<br>由Downloader生成，由Spider处理  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class scrapy.http.Response()</span><br><span class="line">Response对象表示一个HTTP响应，由Downloader生成，由Spider处理</span><br><span class="line">   属性或方法                |               说明</span><br><span class="line">   .url                     |       Response对应的URL地址</span><br><span class="line">   .status                  |       HTTP状态码，默认是200</span><br><span class="line">   .headers                 |       Response对应的头部信息</span><br><span class="line">   .body                    |       Response对应的内容信息，字符串类型</span><br><span class="line">   .flags                   |       一组标记</span><br><span class="line">   .request                 |       产生Response类型对应的Request对象</span><br><span class="line">   .copy()                  |       复制该响应</span><br></pre></td></tr></table></figure><h3 id="（三）Item类"><a href="#（三）Item类" class="headerlink" title="（三）Item类"></a>（三）Item类</h3><p>class scrapy.item.Item()<br>Item对象表示一个从HTML页面中提取的信息内容<br>由Spider生成，由Item Pipeline处理<br>Item类似字典类型，可以按照字典类型操作  </p><h2 id="八、Scrapy爬虫提取信息的方法"><a href="#八、Scrapy爬虫提取信息的方法" class="headerlink" title="八、Scrapy爬虫提取信息的方法"></a>八、Scrapy爬虫提取信息的方法</h2><p><a href="https://blog.csdn.net/u011781521/article/details/70186740">Reference website 4</a></p><p>Scrapy爬虫支持多种HTML信息提取方法：  </p><ul><li>Beautiful Soup</li><li>lxml</li><li>re</li><li>XPath Selector</li><li>CSS Selector<ul><li>CSS Selector 的基本使用:<br><img src="/2020/07/03/Scrapy%E6%A1%86%E6%9E%B6%E7%AE%80%E6%9E%90/5804969-0d88461e43e421f3.webp" alt="CSS Selector 的基本使用"></li></ul></li></ul><h3 id="（一）Request类-1"><a href="#（一）Request类-1" class="headerlink" title="（一）Request类"></a>（一）Request类</h3><h3 id="（二）Response类-1"><a href="#（二）Response类-1" class="headerlink" title="（二）Response类"></a>（二）Response类</h3><h3 id="（三）Item类-1"><a href="#（三）Item类-1" class="headerlink" title="（三）Item类"></a>（三）Item类</h3>]]></content>
    
    
    
    <tags>
      
      <tag>Web Scraping With Python</tag>
      
      <tag>Scrapy框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BeautifulSoup的find_all和find函数</title>
    <link href="/2020/07/03/BeautifulSoup%E7%9A%84find-all%E5%92%8Cfind%E5%87%BD%E6%95%B0/"/>
    <url>/2020/07/03/BeautifulSoup%E7%9A%84find-all%E5%92%8Cfind%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="基于BeautifulSoup库的HTML内容查找方法—-BeautifulSoup的find-all-和find-函数"><a href="#基于BeautifulSoup库的HTML内容查找方法—-BeautifulSoup的find-all-和find-函数" class="headerlink" title="基于BeautifulSoup库的HTML内容查找方法—-BeautifulSoup的find_all()和find()函数"></a>基于BeautifulSoup库的HTML内容查找方法—-BeautifulSoup的find_all()和find()函数</h1><p>find_all()和find()函数通过标签的<strong>名字</strong>和<strong>属性</strong>来查找标签</p><p><strong>BeautifulSoup对象通过find_all()和find()函数获取标签tag对象<br>类似的，直接调用子标签也可获取标签tag对象，例如soup.div.h1</strong></p><p><a href="https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/index.html?highlight=find_all#find-all">Beautiful Soup的find_all()参考文档</a></p><p>以下所有内容基于以下这串代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">url=<span class="string">&quot;https://python123.io/ws/demo.html&quot;</span></span><br><span class="line">r=requests.get(url)</span><br><span class="line">demo=r.text</span><br></pre></td></tr></table></figure><h2 id="一、BeautifulSoup库中的-find-all-方法介绍："><a href="#一、BeautifulSoup库中的-find-all-方法介绍：" class="headerlink" title="一、BeautifulSoup库中的.find_all()方法介绍："></a>一、BeautifulSoup库中的.find_all()方法介绍：</h2><ol><li><p>格式：<br><code>Tag.find_all(name=None, attrs=&#123;&#125;, recursive=True, text=None, limit=None, **kwargs，keywords)</code><br>结果会输出一个<strong>列表</strong>  </p></li><li><p>7个参数介绍</p></li></ol><ul><li><ol><li>name 参数: 对<strong>标签名称</strong>的检索字符串, 返回一个列表类型，存储查找的结果(搜索 name参数的值可以使任一类型的 过滤器 ,字符窜,正则表达式,列表,方法或是 True )</li></ol></li><li><p><strong>以下三种具有极大相似性：</strong></p><ul><li><ol start="2"><li>keyword 参数：例如id属性，如果一个指定名字的参数不是搜索内置的参数名,搜索时会把该参数当作指定名字tag的属性来搜索,如果包含一个名字为 id 的参数,Beautiful Soup会搜索每个tag的”id”属性.(搜索指定名字的属性时可以使用的参数值包括 字符串 , 正则表达式 , 列表, True .)</li></ol><ul><li>例<code>soup.find_all(id=&#39;link2&#39;)</code>等价于<code>soup.find_all(&#39;&#39;,&#39;&#123;&#39;id&#39;:&#39;text&#39;&#125;&#39;)</code>  # 因此前一种较为鸡肋，建议用后一种</li><li><code>soup.find_all(href=re.compile(&quot;elsie&quot;)</code></li></ul></li><li><ol start="3"><li>按CSS搜索:可以通过 class_ 参数搜索有指定CSS类名的tag(class_ 参数同样接受不同类型的过滤器 ,字符串,正则表达式,方法或 True)</li></ol><ul><li>例，<code>soup.find_all(&quot;a&quot;, class_=&quot;sister&quot;)</code>等价于<code>soup.find_all(&quot;a&quot;, attrs=&#123;&quot;class&quot;: &quot;sister&quot;&#125;)</code></li><li>得到<code>[&lt;a class=&quot;sister&quot; href=&quot;http://example.com/elsie&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;]</code></li></ul></li><li><ol start="4"><li>attrs 参数: 对<strong>标签属性值</strong>的检索字符串，可标注属性检索,</li></ol><ul><li>例，<code>find_all(&#39;apan&#39;,attrs=&#123;&#39;class&#39;:&#39;green&#39;,&#39;red&#39;&#125;) </code> # 这里的attrs&#x3D;    可以省略</li></ul></li></ul></li><li><ol start="5"><li>recursive 参数: 是否对<strong>子孙全部</strong>检索，默认True</li></ol></li><li><ol start="6"><li>text&#x2F;string 参数:&lt;&gt;…&lt;&#x2F;&gt;中<strong>字符串区域</strong>的检索字符串，用法和name参数相似，但是是用标签的文本内容去匹配，而不是用标签的属性，text参数相当于搜索 tag 的 tag.string。例，namelist&#x3D;bs.find_all(text&#x3D;’the prince’)(string 参数接受 字符串 , 正则表达式 , 列表, True )</li></ol></li><li><ol start="7"><li>limit 参数:使用 limit 参数限制返回结果的数量.效果与SQL中的limit关键字类似,当搜索到的结果数量达到 limit 的限制时,就停止搜索返回结果.例，若文档树中有3个tag符合搜索条件,但结果只返回了2个,因为我们限制了返回数量，<code>soup.find_all(&quot;a&quot;, limit=2)</code></li></ol></li></ul><p>PS：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="tag">&lt;<span class="name">tag</span>&gt;</span>(..) 等价于 <span class="tag">&lt;<span class="name">tag</span>&gt;</span>.find_all(..)  </span><br><span class="line">   soup(..) 等价于 soup.find_all(..)  </span><br><span class="line">2. 多个标签作为参数如此填写： [&#x27;a&#x27;,&#x27;b&#x27;]</span><br><span class="line">3. <span class="tag">&lt;<span class="name">tag</span>&gt;</span>.find_all(True)，结果将是当前所有标签信息   </span><br><span class="line">4. 正则表达式可用于.find_all()等方法中，类似关键词/模糊词查找。使用时要导入re库，用re.compile()方法</span><br><span class="line">5. 结果会输出一个**列表**</span><br></pre></td></tr></table></figure><p>3.实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="comment"># 正则表达式库</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span>  requests</span><br><span class="line">r = requests.get(<span class="string">&quot;http://python123.io/ws/demo.html&quot;</span>)</span><br><span class="line">demo = r.text</span><br><span class="line">soup = BeautifulSoup(demo,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"><span class="comment"># 查找demo里的a标签里的href的内容</span></span><br><span class="line"><span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(link.get(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line"><span class="comment"># 输出所有a和b标签在列表中</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all([<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]))</span><br><span class="line"><span class="comment"># &lt;tag&gt;.find_all(True)，结果将是当前所有标签信息   </span></span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(<span class="literal">True</span>):</span><br><span class="line">    <span class="built_in">print</span>(tag.name)</span><br><span class="line"><span class="comment"># 用正则表达式查找demo里以b开头的所有标签</span></span><br><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(re.<span class="built_in">compile</span>(<span class="string">&#x27;b&#x27;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(tag.name)</span><br><span class="line"><span class="comment"># 查找demo里CSS Class为”course”的&lt;p&gt;标签</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;course&#x27;</span>))</span><br><span class="line"><span class="comment"># 查找demo里的keyword（关键字参数）id属性中是否包含link1的标签,如果link1没有，将输出空</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="built_in">id</span>=<span class="string">&#x27;link1&#x27;</span>))</span><br><span class="line"><span class="comment"># 用正则表达式来输出link字符串(以link开头)</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="built_in">id</span>=re.<span class="built_in">compile</span>(<span class="string">&#x27;link&#x27;</span>)))</span><br><span class="line"><span class="comment">#　recursive是否对子孙全部检索，默认为True，改为False后只能查儿子节点</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">&#x27;a&#x27;</span>,recursive=<span class="literal">False</span>))</span><br><span class="line"><span class="comment"># 检索Basic Python字符串</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(string = <span class="string">&#x27;Basic Python&#x27;</span>))</span><br><span class="line"><span class="comment"># 用正则表达式检索含有python的所有字符串</span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(string = re.<span class="built_in">compile</span>(<span class="string">&#x27;python&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output：</span></span><br><span class="line">http://www.icourse163.org/course/BIT-<span class="number">268001</span></span><br><span class="line">http://www.icourse163.org/course/BIT-<span class="number">1001870001</span></span><br><span class="line">[&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;, &lt;a <span class="keyword">class</span>=<span class="string">&quot;py1&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-268001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link1&quot;</span>&gt;Basic Python&lt;/a&gt;, </span><br><span class="line">&lt;a <span class="keyword">class</span>=<span class="string">&quot;py2&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-1001870001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link2&quot;</span>&gt;Advanced Python&lt;/a&gt;]</span><br><span class="line">html</span><br><span class="line">head</span><br><span class="line">title</span><br><span class="line">body</span><br><span class="line">p</span><br><span class="line">b</span><br><span class="line">p</span><br><span class="line">a</span><br><span class="line">a</span><br><span class="line">body</span><br><span class="line">b</span><br><span class="line">[&lt;p <span class="keyword">class</span>=<span class="string">&quot;course&quot;</span>&gt;Python <span class="keyword">is</span> a wonderful general-purpose programming language. You can learn Python <span class="keyword">from</span> novice to professional by tracking the following courses:</span><br><span class="line">&lt;a <span class="keyword">class</span>=<span class="string">&quot;py1&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-268001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link1&quot;</span>&gt;Basic Python&lt;/a&gt; <span class="keyword">and</span> &lt;a <span class="keyword">class</span>=<span class="string">&quot;py2&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-1001870001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link2&quot;</span>&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;]</span><br><span class="line">[&lt;a <span class="keyword">class</span>=<span class="string">&quot;py1&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-268001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link1&quot;</span>&gt;Basic Python&lt;/a&gt;]</span><br><span class="line">[&lt;a <span class="keyword">class</span>=<span class="string">&quot;py1&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-268001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link1&quot;</span>&gt;Basic Python&lt;/a&gt;, &lt;a <span class="keyword">class</span>=<span class="string">&quot;py2&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-1001870001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link2&quot;</span>&gt;Advanced Python&lt;/a&gt;]</span><br><span class="line">[]</span><br><span class="line">[<span class="string">&#x27;Basic Python&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;This is a python demo page&#x27;</span>, <span class="string">&#x27;The demo python introduces several python courses.&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、bs4扩展方法："><a href="#二、bs4扩展方法：" class="headerlink" title="二、bs4扩展方法："></a>二、bs4扩展方法：</h2><p><img src="/2020/07/03/BeautifulSoup%E7%9A%84find-all%E5%92%8Cfind%E5%87%BD%E6%95%B0/20190109173523345.png" alt="bs4扩展方法"></p><h2 id="三、BeautifulSoup库中的-find-方法介绍："><a href="#三、BeautifulSoup库中的-find-方法介绍：" class="headerlink" title="三、BeautifulSoup库中的.find()方法介绍："></a>三、BeautifulSoup库中的.find()方法介绍：</h2><ol><li>格式：<br><code>find( name , attrs , recursive , string , **kwargs ,keywords)</code></li></ol><p><strong>find()等价于limit&#x3D;1时的find_all()</strong></p><p><code>find_all() </code>方法的返回结果是值包含一个元素的列表,而<code>find()</code>方法直接返回结果.<br><code>find_all() </code>方法没有找到目标是返回空列表,<code>find()</code>方法找不到目标时,返回 None  </p><p>find_all() 方法将返回文档中符合条件的所有tag,尽管有时候我们只想得到一个结果.<br>比如文档中只有一个<body>标签,那么使用 find_all() 方法来查找<body>标签就不太合适, 使用 find_all 方法并设置 limit&#x3D;1 参数不如直接使用 find() 方法:<br>例如下面两行代码是等价的：  </body></body></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">soup.find_all(<span class="string">&#x27;title&#x27;</span>, limit=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># [&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;]</span></span><br><span class="line"></span><br><span class="line">soup.find(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line"><span class="comment"># &lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>BeautifulSoup库</tag>
      
      <tag>Web Scraping With Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Response异常及爬取网页的通用代码框架</title>
    <link href="/2020/07/03/Response%E5%BC%82%E5%B8%B8%E5%8F%8A%E7%88%AC%E5%8F%96%E7%BD%91%E9%A1%B5%E7%9A%84%E9%80%9A%E7%94%A8%E4%BB%A3%E7%A0%81%E6%A1%86%E6%9E%B6/"/>
    <url>/2020/07/03/Response%E5%BC%82%E5%B8%B8%E5%8F%8A%E7%88%AC%E5%8F%96%E7%BD%91%E9%A1%B5%E7%9A%84%E9%80%9A%E7%94%A8%E4%BB%A3%E7%A0%81%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Response异常及爬取网页的通用代码框架"><a href="#Response异常及爬取网页的通用代码框架" class="headerlink" title="Response异常及爬取网页的通用代码框架"></a>Response异常及爬取网页的通用代码框架</h1><p>使得用户爬取网页更稳定、可靠</p><h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h2><ol><li>Requests库支持6种常用的异常：</li></ol><table><thead><tr><th>异常</th><th>说明</th></tr></thead><tbody><tr><td>requests.ConnectionError</td><td>网络连接异常，如DNS查询失败，拒绝连接等</td></tr><tr><td>requests.HTTPError</td><td>HTTP错误异常</td></tr><tr><td>requests.URLRequired</td><td>URL缺失异常</td></tr><tr><td>requests.TooManyRedirects</td><td>超过最大重定向次数，产生重定向异常</td></tr><tr><td>requests.ConnectTimeout</td><td>连接远程服务器超时异常</td></tr><tr><td>requests.Timeout</td><td>请求URL超时，产生超时异常</td></tr></tbody></table><ol start="2"><li>Response对象的一个方法：<br><code>r.raise_for_status()</code>   :如果<code>status_code</code>不是200，产生异常<code>request.HTTPError</code></li></ol><p>3.e.g.:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ReadTimeout,ConnectTimeout,RequestException     <span class="comment"># 导入request.exceptions下的各种异常错误下的各种异常错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:      <span class="comment"># 把请求放在try下</span></span><br><span class="line">    response=requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>,timeout=<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="keyword">except</span> ReadTimeout:    <span class="comment"># 把可能发生的异常用except获取</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Timeout&#x27;</span>)    <span class="comment"># 超时异常</span></span><br><span class="line"><span class="keyword">except</span> ConnectTimeout: <span class="comment"># 把可能发生的异常用except获取</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Connection error&#x27;</span>)    <span class="comment"># 连接异常</span></span><br><span class="line"><span class="keyword">except</span> RequestException:  <span class="comment"># 把可能发生的异常用except获取</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Error&#x27;</span>)      <span class="comment"># 请求异常</span></span><br></pre></td></tr></table></figure><h2 id="二、爬取网页的通用代码框架："><a href="#二、爬取网页的通用代码框架：" class="headerlink" title="二、爬取网页的通用代码框架："></a>二、爬取网页的通用代码框架：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHTMLText</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r=requests.get(url,timeout=<span class="number">20</span>)</span><br><span class="line">        r.raise_for_status()   <span class="comment"># 👍如果状态不是200，引发HTTPError异常</span></span><br><span class="line">        r.encoding=r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:                   <span class="comment"># 把可能发生的异常用except获取</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;产生异常(raise exception)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url=<span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(getHTMLText(url))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Web Scraping With Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Requests库的7个方法</title>
    <link href="/2020/07/03/Requests%E5%BA%93%E7%9A%847%E4%B8%AA%E6%96%B9%E6%B3%95/"/>
    <url>/2020/07/03/Requests%E5%BA%93%E7%9A%847%E4%B8%AA%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Requests库7个主要方法解析"><a href="#Requests库7个主要方法解析" class="headerlink" title="Requests库7个主要方法解析"></a>Requests库7个主要方法解析</h1><h2 id="一、request方法："><a href="#一、request方法：" class="headerlink" title="一、request方法："></a>一、request方法：</h2><p><strong>格式：</strong><br><code>request.request(method,url,**kwargs)</code></p><blockquote><p>r &#x3D; requests.request(method&#x3D;’GET’, url&#x3D;url, **kwargs)<br>r &#x3D; requests.get(url, **kwargs)<br>PS：上面的方法和下面的方法达到的效果是一样的，就是做了一层封装，把比较常用的方法都抽出来,  </p></blockquote><ul><li><code>method</code>:请求方式，对应HTTP协议请求方法get&#x2F;put&#x2F;post&#x2F;head（获取资源概要）等7种请求方法，例如：request.request(‘GET’,url,**kwargs) ，（Requests库的方法为小写，而HTTP协议请求方法为大写）</li><li><code>url</code>：拟获取页面的URL链接</li><li><code>**kwargs</code>：控制访问参数，共13个:<ul><li><code>params</code>:字典或字节序列(字符串)，作为参数增加至URL中(搭配get)</li><li><code>data</code>:字典(被放进form)或字节序列(字符串)（被放进data）或文件对象，作为Request的内容text（搭配put）</li><li><code>json</code>:JSON格式的数据，作为Request的内容text（json格式，其实就是字符串）（搭配post）</li><li><code>headers</code>:字典，HTTP定制头部，隐藏爬虫信息，模拟浏览器的头部信息（搭配post）</li><li><code>cookies</code>:字典或CookieJar,Request中的cookie（搭配post）</li><li><code>auth</code>: 元祖，支持HTTP认证功能(搭配get)</li><li><code>files</code>: 字典类型，传输文件（搭配post）</li><li><code>timeout</code>: 设定超时时间，秒为单位(搭配get)</li><li><code>proxies</code>: 字典类型，设定访问代理服务器，可以增加登录认证,proxies即代理人(搭配get)</li><li><code>allow_redirects</code>: True&#x2F;False,默认为True,重定向开关(搭配get)</li><li><code>stream</code>: True&#x2F;False，默认为True,获取内容立即下载开关(搭配get)</li><li><code>verity</code>: True&#x2F;False默认Ture,认证ssl证书开关(搭配get)</li><li><code>cert</code>: 本地ssl证书路径(搭配get)</li></ul></li></ul><hr><h3 id="（一）e-g-params介绍：字典或字节序列，作为参数增加到url中"><a href="#（一）e-g-params介绍：字典或字节序列，作为参数增加到url中" class="headerlink" title="（一）e.g.:params介绍：字典或字节序列，作为参数增加到url中"></a>（一）e.g.:<code>params</code>介绍：字典或字节序列，作为参数增加到url中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kv=&#123;<span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27;value1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">r=requests.request(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://python123.io/ws&#x27;</span>,params=kv)   </span><br><span class="line"><span class="built_in">print</span>(r.url)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line">https://python123.io/ws?key1=value1&amp;key2=value2</span><br></pre></td></tr></table></figure><hr><h3 id="（二）e-g-date介绍：字典，字节序列或文件对象-作为Request的内容"><a href="#（二）e-g-date介绍：字典，字节序列或文件对象-作为Request的内容" class="headerlink" title="（二）e.g.:date介绍：字典，字节序列或文件对象,作为Request的内容"></a>（二）e.g.:<code>date</code>介绍：字典，字节序列或文件对象,作为Request的内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">kv=&#123;<span class="string">&#x27;key1&#x27;</span>:<span class="string">&#x27;value1&#x27;</span>,<span class="string">&#x27;key2&#x27;</span>:<span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">r=requests.request(<span class="string">&#x27;PUT&#x27;</span>,<span class="string">&#x27;http://httpbin.org/put&#x27;</span>,data=kv)   </span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line"><span class="number">200</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;files&quot;</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">&quot;form&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;key1&quot;</span>: <span class="string">&quot;value1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key2&quot;</span>: <span class="string">&quot;value2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;23&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;python-requests/2.22.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-5e4a8581-cb3c8890bd750450bacc8820&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;json&quot;</span>: null,</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;218.72.109.87&quot;</span>,</span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/put&quot;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="（三）e-g-json介绍：JSON格式的数据，作为Request的内容"><a href="#（三）e-g-json介绍：JSON格式的数据，作为Request的内容" class="headerlink" title="（三）e.g.:json介绍：JSON格式的数据，作为Request的内容"></a>（三）e.g.:<code>json</code>介绍：JSON格式的数据，作为Request的内容</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">48</span>]: kv = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;youdi&#x27;</span>, <span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;king&#x27;</span>, <span class="string">&#x27;rank&#x27;</span>: <span class="string">&#x27;the one&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: r = requests.request(method=<span class="string">&#x27;POST&#x27;</span>, url=url, json=kv)</span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: <span class="built_in">print</span>(r.text)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;args&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&#123;\&quot;role\&quot;: \&quot;king\&quot;, \&quot;rank\&quot;: \&quot;the one\&quot;, \&quot;name\&quot;: \&quot;youdi\&quot;&#125;&quot;</span>,  <span class="comment">#json格式，其实就是字符串</span></span><br><span class="line">  <span class="string">&quot;files&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;form&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Length&quot;</span>: <span class="string">&quot;52&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;python-requests/2.13.0&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;json&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;youdi&quot;</span>, </span><br><span class="line">    <span class="string">&quot;rank&quot;</span>: <span class="string">&quot;the one&quot;</span>, </span><br><span class="line">    <span class="string">&quot;role&quot;</span>: <span class="string">&quot;king&quot;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;183.60.175.16&quot;</span>, </span><br><span class="line">  <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://httpbin.org/post&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="（四）e-g-headers介绍-字典-HTTP定制头部信息，隐藏爬虫信息，模拟浏览器的头部信息"><a href="#（四）e-g-headers介绍-字典-HTTP定制头部信息，隐藏爬虫信息，模拟浏览器的头部信息" class="headerlink" title="（四）e.g.:headers介绍:字典, HTTP定制头部信息，隐藏爬虫信息，模拟浏览器的头部信息"></a>（四）e.g.:<code>headers</code>介绍:字典, HTTP定制头部信息，隐藏爬虫信息，模拟浏览器的头部信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">58</span>]: url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: r = requests.request(<span class="string">&#x27;POST&#x27;</span>, url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 头部信息</span></span><br><span class="line">In [<span class="number">69</span>]: r.request.headers   <span class="comment"># r包含request请求。r.request.headers是请求头(request headers)，而r.headers是响应头(response headers)</span></span><br><span class="line"><span class="comment"># 观察User-Agent</span></span><br><span class="line">Out[<span class="number">69</span>]: &#123;<span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>, <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;python-requests/2.13.0&#x27;</span>, <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>, <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;0&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">#加入headers后</span></span><br><span class="line">In [<span class="number">62</span>]: headers = &#123; <span class="comment"># 浏览器代理</span></span><br><span class="line">    ...:      <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Ch</span></span><br><span class="line"><span class="string">    ...: rome/57.0.2987.133 Safari/537.36&quot;</span></span><br><span class="line">    ...: &#125;</span><br><span class="line">In [<span class="number">63</span>]: r = requests.request(<span class="string">&#x27;POST&#x27;</span>, url, headers=headers)</span><br><span class="line"></span><br><span class="line">In [<span class="number">71</span>]: r.request.headers       <span class="comment"># 查看请求头</span></span><br><span class="line">Out[<span class="number">71</span>]: &#123;<span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>, <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&#x27;</span>, <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>, <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>, <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;0&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="（五）e-g-cookie介绍：字典或CooKiJar-Request中的cookie"><a href="#（五）e-g-cookie介绍：字典或CooKiJar-Request中的cookie" class="headerlink" title="（五）e.g.:cookie介绍：字典或CooKiJar, Request中的cookie"></a>（五）e.g.:<code>cookie</code>介绍：字典或CooKiJar, Request中的cookie</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先获取百度的cookie，当我们使用电脑进行浏览网页的时候，服务器就会生成一个证书，并且返回给我们的电脑（响应），这个证书就是cookie，一般情况下，cookie是服务器写入客户端的文件，我们也可以叫浏览器缓存。用户在下次访问的时候，就会把本地的cookie文件加上url一起发送给服务器，服务器以此来判断用户的状态。</span></span><br><span class="line">In [<span class="number">74</span>]: r = requests.request(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">75</span>]: r</span><br><span class="line">Out[<span class="number">75</span>]: &lt;Response [<span class="number">200</span>]&gt;</span><br><span class="line"><span class="comment"># 保存在变量中</span></span><br><span class="line">In [<span class="number">76</span>]: cookie = r.cookies       <span class="comment"># 将r的cookies属性存储在变量cookie里</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cookie类型           </span></span><br><span class="line">In [<span class="number">86</span>]: <span class="built_in">type</span>(cookie)</span><br><span class="line">Out[<span class="number">86</span>]: requests.cookies.RequestsCookieJar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [<span class="number">77</span>]: r_baidu = requests.request(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=1&amp;tn=baidu&amp;wd=old&amp;rsv_pq=981edbe6000308e9&amp;rsv_t=76c1VG%2B1PcKzCGSEjcf3W2zDn5ZcBnhR1TAe%2FcJ32OW62aKsa5DWo7YYsms&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=2&#x27;</span>, cookie=cookie)</span><br><span class="line"><span class="comment"># https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=0&amp;rsv_idx=1&amp;tn=baidu&amp;wd=test&amp;rsv_pq=981edbe6000308e9&amp;rsv_t=76c1VG%2B1PcKzCGSEjcf3W2zDn5ZcBnhR1TAe%2FcJ32OW62aKsa5DWo7YYsms&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=2 中 wd修改关键词w为old 就是提交给百度进行搜索old的内容</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="（六）e-g-auth介绍：元祖，支持HTTP认证功能"><a href="#（六）e-g-auth介绍：元祖，支持HTTP认证功能" class="headerlink" title="（六）e.g.:auth介绍：元祖，支持HTTP认证功能"></a>（六）e.g.:<code>auth</code>介绍：元祖，支持HTTP认证功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 最简单的http验证</span></span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://httpbin.org/auth&#x27;</span>, auth=HTTPBasicAuth(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;user&#x27;</span>))</span><br><span class="line"><span class="comment"># r = requests.get(&#x27;http://httpbin.org/auth&#x27;, auth=(&#x27;user&#x27;, &#x27;user&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="（七）e-g-files介绍：字典类型，传输文件"><a href="#（七）e-g-files介绍：字典类型，传输文件" class="headerlink" title="（七）e.g.:files介绍：字典类型，传输文件"></a>（七）e.g.:<code>files</code>介绍：字典类型，传输文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs = &#123;file: <span class="built_in">open</span>(<span class="string">&#x27;data.xls&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125;        <span class="comment"># .xls是一个特有的二进制格式，&#x27;rb&#x27;为为读取二进制文件</span></span><br><span class="line"><span class="comment"># 使用files参数就可以了</span></span><br><span class="line">r = requests.request(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://httpbin.org/post&#x27;</span>,files=fs)       <span class="comment"># files=字典</span></span><br></pre></td></tr></table></figure><hr><h3 id="（八）e-g-timeout介绍：设定超时时间，秒为单位"><a href="#（八）e-g-timeout介绍：设定超时时间，秒为单位" class="headerlink" title="（八）e.g.:timeout介绍：设定超时时间，秒为单位"></a>（八）e.g.:<code>timeout</code>介绍：设定超时时间，秒为单位</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ReadTimeout     <span class="comment"># 导入request.exceptions下的各种异常错误下的各种异常错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:     <span class="comment"># 把请求放在try下</span></span><br><span class="line">  <span class="comment"># 设置必须在500ms内收到响应，不然或抛出ReadTimeout异常</span></span><br><span class="line">  response = requests.get(<span class="string">&quot;http://httpbin.org/get&quot;</span>, timeout=<span class="number">0.5</span>)</span><br><span class="line">           <span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="keyword">except</span> ReadTimeout:   <span class="comment"># 把可能发生的异常用except获取：s</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Timeout&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="（九）e-g-proxies介绍：字典类型，设定访问代理服务器，可以增加登录认证"><a href="#（九）e-g-proxies介绍：字典类型，设定访问代理服务器，可以增加登录认证" class="headerlink" title="（九）e.g.:proxies介绍：字典类型，设定访问代理服务器，可以增加登录认证"></a>（九）e.g.:<code>proxies</code>介绍：字典类型，设定访问代理服务器，可以增加登录认证</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#普通代理（可隐藏用户爬取网页的原ID地址信息）</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">   <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://127.0.0.1:1080&quot;</span>,</span><br><span class="line">   <span class="string">&quot;https&quot;</span>: <span class="string">&quot;https://127.0.0.1:1080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 往请求中设置代理(proxies)</span></span><br><span class="line">r = requests.get(<span class="string">&quot;https://www.taobao.com&quot;</span>, proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line"><span class="comment"># 带有用户名和密码的代理</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">   <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://user:password@127.0.0.1:9743/&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">&quot;https://www.taobao.com&quot;</span>, proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line"><span class="comment"># 设置socks代理,翻墙必备</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">   <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span>,</span><br><span class="line">   <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;socks5://127.0.0.1:1080&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(<span class="string">&quot;https://www.google.com&quot;</span>, proxies=proxies)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br></pre></td></tr></table></figure><hr><h3 id="（十）e-g-allow-redirects介绍-True-False-默认为True-重定向开关"><a href="#（十）e-g-allow-redirects介绍-True-False-默认为True-重定向开关" class="headerlink" title="（十）e.g.:allow_redirects介绍:True&#x2F;False,默认为True,重定向开关"></a>（十）e.g.:<code>allow_redirects</code>介绍:True&#x2F;False,默认为True,重定向开关</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.request(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://httpbin.org/get&#x27;</span>,allow_redirects=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="（十一）e-g-stream介绍True-False，默认为True-获取内容立即下载开关"><a href="#（十一）e-g-stream介绍True-False，默认为True-获取内容立即下载开关" class="headerlink" title="（十一）e.g.:stream介绍True&#x2F;False，默认为True,获取内容立即下载开关"></a>（十一）e.g.:<code>stream</code>介绍True&#x2F;False，默认为True,获取内容立即下载开关</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.request(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://httpbin.org/get/**.txt&#x27;</span>,stream=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="（十二）e-g-verity介绍-True-False默认Ture-认证ssl证书开关"><a href="#（十二）e-g-verity介绍-True-False默认Ture-认证ssl证书开关" class="headerlink" title="（十二）e.g.:verity介绍:True&#x2F;False默认Ture,认证ssl证书开关"></a>（十二）e.g.:<code>verity</code>介绍:True&#x2F;False默认Ture,认证ssl证书开关</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 无证书访问</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.12306.cn&#x27;</span>)</span><br><span class="line"><span class="comment"># 在请求https时，request会进行证书的验证，如果验证失败则会抛出异常</span></span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line">---------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭验证，但是仍然会报出证书警告(不安全的请求警告)</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.12306.cn&#x27;</span>,verify=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line"><span class="comment"># 消除关闭证书验证的警告</span></span><br><span class="line"><span class="keyword">from</span> requests.packages <span class="keyword">import</span> urllib3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭警告</span></span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.12306.cn&#x27;</span>,verify=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br></pre></td></tr></table></figure><hr><h3 id="（十三）e-g-cert介绍-本地ssl证书路径"><a href="#（十三）e-g-cert介绍-本地ssl证书路径" class="headerlink" title="（十三）e.g.:cert介绍:本地ssl证书路径"></a>（十三）e.g.:<code>cert</code>介绍:本地ssl证书路径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置本地证书</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r = requests.get(<span class="string">&#x27;https://www.12306.cn&#x27;</span>, cert=(<span class="string">&#x27;/home/youdi/Download/**.crt&#x27;</span>, <span class="string">&#x27;/hone/youdi/.ssh/**.key&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Web Scraping With Python</tag>
      
      <tag>Requests库</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
